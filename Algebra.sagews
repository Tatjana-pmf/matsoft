︠434fb97e-9d8d-4f83-8912-b32af76b6850i︠
%md
# Linearna algebra
︡8ba2dc29-3000-43b8-b814-374570783404︡{"html":"<h1>Linearna algebra</h1>\n"}︡
︠7903e93f-9366-4aa1-990b-dcffd9f991dei︠
%md
### Vektorski prostori i vektori
︡0c4a87b3-c6e4-4768-9787-cf372210bcfa︡{"html":"<h3>Vektorski prostori i vektori</h3>\n"}︡
︠b6919a0f-cbfa-4017-bb0f-885c94a1e0e0︠
R3 = VectorSpace(QQ, 3)
(b1, b2, b3) = R3.basis()
b1, b2, b3

vector1 = R3([-1, 2, 7])
vector2 = R3([4, -9, 2])
var('a b')
a * vector1 + b * vector2
︡070de6ab-9c3f-413e-9bc8-06d0af2d63cf︡{"stdout":"((1, 0, 0), (0, 1, 0), (0, 0, 1))\n"}︡{"stdout":"(a, b)\n"}︡{"stdout":"(-a + 4*b, 2*a - 9*b, 7*a + 2*b)\n"}︡
︠efb7dfd7-bef2-4247-aec0-6ce13c1ad0e0︠
sqrt(vector1 * vector1)
vector1.norm()
vector1.norm(2)
vector1.norm(Infinity)
︡5020282f-29fd-4baf-aaa0-735cd8149f24︡{"stdout":"3*sqrt(6)\n"}︡{"stdout":"3*sqrt(6)\n"}︡{"stdout":"3*sqrt(6)\n"}︡{"stdout":"7\n"}︡
︠1c284c75-080e-4534-80e5-83f63d684730︠
2 * vector1
vector1 * vector2
vector1.dot_product(vector2)
vector1.cross_product(vector2)
︡abd882e7-24e9-4f15-8488-8b6ad4c85abf︡{"stdout":"(-2, 4, 14)\n"}︡{"stdout":"-8\n"}︡{"stdout":"-8\n"}︡{"stdout":"(67, 30, 1)\n"}︡
︠58f19444-ee7e-42c9-b892-64b9b26a0b2bi︠
%md
Naredba `VectorSpace` kreira vektorski prostor gdje je prvi parametar polje a drugi dimenzija. Tipičan izbor su **ZZ**, **QQ**, **RQ** i **CC**, no Sage podržava izuzetno velik broj polja.
︡b0f961a3-2ce3-42b2-82b7-9bcafd3a444d︡{"html":"<p>Naredba <code>VectorSpace</code> kreira vektorski prostor gdje je prvi parametar polje a drugi dimenzija. Tipičan izbor su <strong>ZZ</strong>, <strong>QQ</strong>, <strong>RQ</strong> i <strong>CC</strong>, no Sage podržava izuzetno velik broj polja.</p>\n"}︡
︠d31d9bf7-b3da-4e9e-8992-b4c2997e1bd8︠
u = vector(QQ, [1, 2/7, 10/3])
u[1]
︡a5236ee6-e412-43c8-b1d3-f8938e2b3213︡{"stdout":"2/7\n"}︡
︠a9dda429-5db0-4033-8b8a-dbce416f25e8i︠
%md
I ostali načini pristupanja elementima naravno funkcioniraju.
︡e82d7bb4-a98c-41a0-83f7-2bd092d4a9f9︡{"html":"<p>I ostali načini pristupanja elementima naravno funkcioniraju.</p>\n"}︡
︠cf91747a-68dc-4eac-af46-85c0e5bde0c4︠
u[:2]
︡0f532ffa-f5ef-48c2-bee8-170c90c126cf︡{"stdout":"(1, 2/7)\n"}︡
︠83dc5aa3-bd19-40d8-bd5f-13e6a26a96ce︠
u[2] = numerical_approx(pi, digits=5)
u
︡4d34d909-db88-455f-8504-7ee133e3752a︡{"stdout":"(1, 2/7, 355/113)\n"}︡
︠ba02b9d0-e15b-49a2-aa67-1573f594a982i︠
%md
### Matrice
︡cd6dcc00-ec77-4271-a1dc-88376576b8e1︡{"html":"<h3>Matrice</h3>\n"}︡
︠a3e7f758-15b8-4512-be66-cc3d2b1cceb6︠
M4 = MatrixSpace(QQ, 4)
show(M4.identity_matrix())
︡862eb26f-8c02-44d6-b84d-762d7e7f6025︡{"tex":{"tex":"\\left(\\begin{array}{rrrr}\n1 & 0 & 0 & 0 \\\\\n0 & 1 & 0 & 0 \\\\\n0 & 0 & 1 & 0 \\\\\n0 & 0 & 0 & 1\n\\end{array}\\right)","display":true}}︡
︠01ca87c8-9341-467c-8121-d8b61449fdac︠
M34 = MatrixSpace(QQ, 3, 4)
show(M34.basis())
︡fb43fa8e-69e5-494e-82b9-4299e3b41c0e︡{"tex":{"tex":"\\left[\\left(\\begin{array}{rrrr}\n1 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0\n\\end{array}\\right), \\left(\\begin{array}{rrrr}\n0 & 1 & 0 & 0 \\\\\n0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0\n\\end{array}\\right), \\left(\\begin{array}{rrrr}\n0 & 0 & 1 & 0 \\\\\n0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0\n\\end{array}\\right), \\left(\\begin{array}{rrrr}\n0 & 0 & 0 & 1 \\\\\n0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0\n\\end{array}\\right), \\left(\\begin{array}{rrrr}\n0 & 0 & 0 & 0 \\\\\n1 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0\n\\end{array}\\right), \\left(\\begin{array}{rrrr}\n0 & 0 & 0 & 0 \\\\\n0 & 1 & 0 & 0 \\\\\n0 & 0 & 0 & 0\n\\end{array}\\right), \\left(\\begin{array}{rrrr}\n0 & 0 & 0 & 0 \\\\\n0 & 0 & 1 & 0 \\\\\n0 & 0 & 0 & 0\n\\end{array}\\right), \\left(\\begin{array}{rrrr}\n0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 1 \\\\\n0 & 0 & 0 & 0\n\\end{array}\\right), \\left(\\begin{array}{rrrr}\n0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 \\\\\n1 & 0 & 0 & 0\n\\end{array}\\right), \\left(\\begin{array}{rrrr}\n0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 \\\\\n0 & 1 & 0 & 0\n\\end{array}\\right), \\left(\\begin{array}{rrrr}\n0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 \\\\\n0 & 0 & 1 & 0\n\\end{array}\\right), \\left(\\begin{array}{rrrr}\n0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 1\n\\end{array}\\right)\\right]","display":true}}︡
︠a3b3ddd4-59cf-426d-a16e-e076f9129251︠
A = M4.matrix([[0, -1, -1, 1], [1, 1, 1, 1], [2, 4, 1, -2],
       [3, 1, -2, 2]])
b = vector(QQ, [0, 6, -1, 3])
show(A)
show(b)
A.solve_right(b)
A\b
︡49712cfc-621c-453b-b5ca-2abd5040a9dc︡{"tex":{"tex":"\\left(\\begin{array}{rrrr}\n0 & -1 & -1 & 1 \\\\\n1 & 1 & 1 & 1 \\\\\n2 & 4 & 1 & -2 \\\\\n3 & 1 & -2 & 2\n\\end{array}\\right)","display":true}}︡{"tex":{"tex":"\\left(0,\\,6,\\,-1,\\,3\\right)","display":true}}︡{"stdout":"(2, -1, 3, 2)\n"}︡{"stdout":"(2, -1, 3, 2)\n"}︡
︠5b1a860c-ea71-4658-b41c-21728b61f555︠
A[1]
︡45e3eeca-0ac8-49b3-99ad-c92862e0dd49︡{"stdout":"(1, 1, 1, 1)\n"}︡
︠94c490f4-9fac-413e-8f6e-bd86cecfd18c︠
A[:,0]
︡b924fa03-e73d-424a-8656-d97caa988d4b︡{"stdout":"[0]\n[1]\n[2]\n[3]\n"}︡
︠a0e0c0ea-84ce-4bb3-9156-99ac73db4882︠
A[:,1] = vector([1,1,1,0])
A
︡d3c06d7c-ed6a-4e3d-8349-950d383e059a︡{"stdout":"[ 0  1 -1  1]\n[ 1  1  1  1]\n[ 2  1  1 -2]\n[ 3  0 -2  2]\n"}︡
︠fc328dc8-c84b-4f4b-b884-e3340232adb1︠
A.row(2)
A.column(2)
︡1d43e342-753a-49b8-bf48-0577b9108636︡{"stdout":"(2, 1, 1, -2)\n"}︡{"stdout":"(-1, 1, 1, -2)\n"}︡
︠411b9edb-1dcf-4ac3-b7d9-f3d5476c6811︠
A.submatrix(2, 2, 2, 2)
︡08f4eca6-676f-49c3-9a4c-ca55c03325cd︡{"stdout":"[ 1 -2]\n[-2  2]\n"}︡
︠f1e4156d-a924-4464-9109-77e24be2de82︠
A = Matrix(QQ, [[1, 2, 3], [4, 5, 6], [7, 8, 9]])
A.rescale_row(1, 2)
A
︡f4d323d7-dce1-4076-b74a-88228ae26aea︡{"stdout":"[ 1  2  3]\n[ 8 10 12]\n[ 7  8  9]\n"}︡
︠b0860180-a404-407f-a544-b9a1d12433e0︠
A.swap_rows(0, 1)
A
︡2873ee3f-f53d-45f8-bc1f-b037c80f6696︡{"stdout":"[ 8 10 12]\n[ 1  2  3]\n[ 7  8  9]\n"}︡
︠e58760de-6554-4e6a-997d-67191421e1f8︠
A.add_multiple_of_row(0, 1 ,3)
A
︡116c8bd0-6d03-42f5-a762-fc789a1c0922︡{"stdout":"[14 22 30]\n[ 1  2  3]\n[ 7  8  9]\n"}︡
︠d54a5ea7-61c4-4cfb-842e-4cb65217cea8︠
A.echelon_form() #Gaussova eliminacija
︡c53afb30-df37-4f20-a08c-31bb6099286a︡{"stdout":"[ 1  0 -1]\n[ 0  1  2]\n[ 0  0  0]\n"}︡
︠8574d347-fe3b-4484-8ba3-0b32df38e463︠
M3 = MatrixSpace(QQ, 2, 3)
A = M3.matrix([[3, 2, 1], [4, 5, 6]])
B = M3.matrix([[2, 2, 2], [1, 2, 3]])
show(A+B)
show(1/2*A)
︡abf3c0d7-11ad-4e2d-8e11-435c19c816ef︡{"tex":{"tex":"\\left(\\begin{array}{rrr}\n5 & 4 & 3 \\\\\n5 & 7 & 9\n\\end{array}\\right)","display":true}}︡{"tex":{"tex":"\\left(\\begin{array}{rrr}\n\\frac{3}{2} & 1 & \\frac{1}{2} \\\\\n2 & \\frac{5}{2} & 3\n\\end{array}\\right)","display":true}}︡
︠ad11368c-0352-47e7-b39f-547ab85030ce︠
var('a b c d e f')
C = Matrix(QQ, [[4, 2, 1], [5, 3, 7]])
D = Matrix(SR, [[a, b], [c, d], [e, f]])
show(C * D)
︡ebc8d2c5-6b46-4dd4-91d6-2f3f3d2e5fdc︡{"stdout":"(a, b, c, d, e, f)\n"}︡{"tex":{"tex":"\\left(\\begin{array}{rr}\n4 \\, a + 2 \\, c + e & 4 \\, b + 2 \\, d + f \\\\\n5 \\, a + 3 \\, c + 7 \\, e & 5 \\, b + 3 \\, d + 7 \\, f\n\\end{array}\\right)","display":true}}︡

︠24d75cb8-c157-4be4-8c11-e07e562eb6de︠
type(D)
︡9e09d322-3988-4aba-bf0d-f6c004fdc667︡{"stdout":"<type 'sage.matrix.matrix_symbolic_dense.Matrix_symbolic_dense'>\n"}︡
︠03b227ef-873c-4a89-8669-6936cf1d75d7︠
var('x1 x2 x3')
X = vector([x1,x2,x3])
show(C * X)
︡e16c8301-1555-47ed-afa3-c19a769954ca︡{"stdout":"(x1, x2, x3)\n"}︡{"tex":{"tex":"\\left(4 \\, x_{1} + 2 \\, x_{2} + x_{3},\\,5 \\, x_{1} + 3 \\, x_{2} + 7 \\, x_{3}\\right)","display":true}}︡
︠4424c67a-8f69-45d1-86ed-4f3098690689︠
A = matrix(QQ, [[2, 5, 4], [3, 1, 2], [5, 4, 6]])
A.det()
A.rank()
A.transpose()
A.adjoint()
A.inverse()
︡faed8385-a429-4ae3-bcec-65ed813e0a4d︡{"stdout":"-16\n"}︡{"stdout":"3\n"}︡{"stdout":"[2 3 5]\n[5 1 4]\n[4 2 6]\n"}︡{"stdout":"[ -2 -14   6]\n[ -8  -8   8]\n[  7  17 -13]\n"}︡{"stdout":"[   1/8    7/8   -3/8]\n[   1/2    1/2   -1/2]\n[ -7/16 -17/16  13/16]\n"}︡
︠4c70388a-ce2e-43b9-b637-e8789123755e︠
A.adjoint()/A.det() == A.inverse()
︡5d2ce4d0-1d6d-48d3-9cde-2cdf0fb96840︡{"stdout":"True\n"}︡
︠87d11b47-d510-4fcd-9c0a-f7497ca81089︠
A.norm(1)
A.norm()
A.norm('frob')
︡163af5e9-ef0f-481e-841e-525db9ea7f94︡{"stdout":"12.0\n"}︡{"stdout":"11.3469601386\n"}︡{"stdout":"11.6619037897\n"}︡
︠f63240fa-4141-4b0b-8162-75e3d0211e91︠
A = matrix([[1,2],[3,4]]) #ako ne specificiramo polje, bit će odabrano najmanje koje sadrži sve elemente matrice
type(A)
︡9aec525e-0d8f-4b92-8392-90ad38d4b434︡{"stdout":"<type 'sage.matrix.matrix_integer_dense.Matrix_integer_dense'>\n"}︡
︠e0492e6a-d413-4997-b137-481d3b1a30be︠
show(block_matrix([[A,-A],[2*A, A^2]]))
︡f0462d2d-db60-4804-91a1-cccaa217079e︡{"tex":{"tex":"\\left(\\begin{array}{rr|rr}\n1 & 2 & -1 & -2 \\\\\n3 & 4 & -3 & -4 \\\\\n\\hline\n 2 & 4 & 7 & 10 \\\\\n6 & 8 & 15 & 22\n\\end{array}\\right)","display":true}}︡
︠06e5780c-c969-45bc-ba6e-30d6ef2ebca9︠
A = matrix([[1,2,3],[4,5,6]])
show(block_matrix([1,A,0,0,-A,2], ncols=3))
︡fe012a77-047f-44bb-b095-cfa5b2ba6495︡{"tex":{"tex":"\\left(\\begin{array}{rr|rrr|rr}\n1 & 0 & 1 & 2 & 3 & 0 & 0 \\\\\n0 & 1 & 4 & 5 & 6 & 0 & 0 \\\\\n\\hline\n 0 & 0 & -1 & -2 & -3 & 2 & 0 \\\\\n0 & 0 & -4 & -5 & -6 & 0 & 2\n\\end{array}\\right)","display":true}}︡
︠d1157127-a92e-4fe8-a849-3651eadf7f0a︠
A = matrix(3,3,range(9))
A


︡60ea92d0-d625-4fc0-b75e-0bfa6c4d4bf9︡{"stdout":"[0 1 2]\n[3 4 5]\n[6 7 8]\n"}︡
︠9e8a9736-df58-443a-b3a5-0f42aeeab219︠
R.<x> = PolynomialRing(GF(5),'x')
A = random_matrix(R,2,3)
A
︡ab013f6c-4d2b-4214-b76b-a49942527762︡{"stdout":"[        2*x + 1               0   x^2 + 3*x + 4]\n[      4*x^2 + 4 4*x^2 + 2*x + 3 4*x^2 + 4*x + 4]\n"}︡
︠2f3a31d6-a97d-4f82-a6e8-53a03392d255i︠
%md
#### Spektar matrica
︡8af3692b-18ac-4956-9462-97e60f7c7d45︡{"html":"<h4>Spektar matrica</h4>\n"}︡
︠22464251-0d1c-4cf0-977c-66a016af1fcb︠
A = Matrix(QQ, [[2, -3, 1], [1, -2, 1], [1, -3, 2]])
ev = A.eigenvectors_right()
for v in ev:
    show(v[0]) # sv. vrijednosti
for v in ev:
    show(v[1]) # sv. vektori
for v in ev:
    show(v[2]) # kratnosti
︡a03ea767-2312-41e8-b8fc-355cc4d9c500︡{"tex":{"tex":"0","display":true}}︡{"tex":{"tex":"1","display":true}}︡{"tex":{"tex":"\\left[\\left(1,\\,1,\\,1\\right)\\right]","display":true}}︡{"tex":{"tex":"\\left[\\left(1,\\,0,\\,-1\\right), \\left(0,\\,1,\\,3\\right)\\right]","display":true}}︡{"tex":{"tex":"1","display":true}}︡{"tex":{"tex":"2","display":true}}︡
︠e4887dad-b013-4e89-b1b8-c115c9ec6139︠
A.eigenvalues()
︡4dd85d70-ebc7-4556-be3e-3ac0d39958a0︡{"stdout":"[0, 1, 1]\n"}︡
︠b3005073-2dfc-49c5-9468-4886c0fdf4e8︠
D, P = A.eigenmatrix_right()
show(D)
show(P)
A*P == P*D
︡3f5ba444-4e0f-49ad-9d47-c9c4c6038307︡{"tex":{"tex":"\\left(\\begin{array}{rrr}\n0 & 0 & 0 \\\\\n0 & 1 & 0 \\\\\n0 & 0 & 1\n\\end{array}\\right)","display":true}}︡{"tex":{"tex":"\\left(\\begin{array}{rrr}\n1 & 1 & 0 \\\\\n1 & 0 & 1 \\\\\n1 & -1 & 3\n\\end{array}\\right)","display":true}}︡{"stdout":"True\n"}︡
︠fc1a9298-7def-404b-9790-13a6fa7f0b50︠
A = Matrix(RDF, [[1, -1, 4], [1, 4, -2], [1, 4, 2], [1, -1, 0]])
type(A)
︡25a11d0d-0ec5-4a1a-a377-066af196b288︡{"stdout":"<type 'sage.matrix.matrix_real_double_dense.Matrix_real_double_dense'>\n"}︡
︠aefedff5-01f2-4f46-ad95-eac4e4901ba7︠
Q, R = A.QR()
show(Q)
show(R)
︡aff133ef-ab2f-4e2f-b93d-701767d8c472︡{"tex":{"tex":"\\left(\\begin{array}{rrrr}\n-0.5 & 0.5 & -0.5 & -0.5 \\\\\n-0.5 & -0.5 & 0.5 & -0.5 \\\\\n-0.5 & -0.5 & -0.5 & 0.5 \\\\\n-0.5 & 0.5 & 0.5 & 0.5\n\\end{array}\\right)","display":true}}︡{"tex":{"tex":"\\left(\\begin{array}{rrr}\n-2.0 & -3.0 & -2.0 \\\\\n0.0 & -5.0 & 2.0 \\\\\n0.0 & 0.0 & -4.0 \\\\\n0.0 & -0.0 & -0.0\n\\end{array}\\right)","display":true}}︡
︠a3c3eef7-bdd9-4cb4-9287-0ceb52263f79︠
U, Sigma, V = A.SVD()
show(U)
show(Sigma)
show(V)
︡e3a3b6b4-392d-46c0-8dbf-c0dfe2546f3b︡{"tex":{"tex":"\\left(\\begin{array}{rrrr}\n-0.313279120424 & 0.771564156303 & -0.237791811076 & -0.5 \\\\\n0.748087126775 & -0.146888948344 & -0.4108397347 & -0.5 \\\\\n0.569322205509 & 0.61893410742 & 0.206864199386 & 0.5 \\\\\n-0.134514199158 & 0.00574110053924 & -0.855495745162 & 0.5\n\\end{array}\\right)","display":true}}︡{"tex":{"tex":"\\left(\\begin{array}{rrr}\n6.00328466876 & 0.0 & 0.0 \\\\\n0.0 & 4.9112061916 & 0.0 \\\\\n0.0 & 0.0 & 1.35669706619 \\\\\n0.0 & 0.0 & 0.0\n\\end{array}\\right)","display":true}}︡{"tex":{"tex":"\\left(\\begin{array}{rrr}\n0.14485670107 & 0.254387693609 & -0.956192155111 \\\\\n0.952383730605 & 0.226191965094 & 0.204456412486 \\\\\n-0.268294177787 & 0.940278733285 & 0.209509278787\n\\end{array}\\right)","display":true}}︡
︠963191eb-dc76-4bf1-8bb3-ebf8d25c534d︠
A = matrix(QQ, [[2,4,3],[-4,-6,-3],[3,3,1]])
A.characteristic_polynomial()
A.minimal_polynomial().factor()
︡e3ff07e7-f937-44a1-a365-21fa950e0c25︡{"stdout":"x^3 + 3*x^2 - 4\n"}︡{"stdout":"(x - 1) * (x + 2)^2\n"}︡
︠50cfaf7c-ddbe-45c1-873c-581c0f5b9cb6︠
show(A.jordan_form())
︡67577710-967a-4425-879e-528a877100cd︡{"tex":{"tex":"\\left(\\begin{array}{r|rr}\n1 & 0 & 0 \\\\\n\\hline\n 0 & -2 & 1 \\\\\n0 & 0 & -2\n\\end{array}\\right)","display":true}}︡
︠ddc2b286-5f0b-4ff0-b97d-861c770d577b︠
show(A.jordan_form(transformation=True))
︡b039f161-5863-457a-8dbc-298ddff476a9︡{"tex":{"tex":"\\left(\\left(\\begin{array}{r|rr}\n1 & 0 & 0 \\\\\n\\hline\n 0 & -2 & 1 \\\\\n0 & 0 & -2\n\\end{array}\\right), \\left(\\begin{array}{rrr}\n1 & 1 & 1 \\\\\n-1 & -1 & 0 \\\\\n1 & 0 & -1\n\\end{array}\\right)\\right)","display":true}}︡
︠70491f3e-07d0-4536-8b27-28b55b60584d︠
A = matrix(QQ, [[1,-1/2],[-1/2,-1]])
A.jordan_form()
︡c6270b2b-f2c8-469c-85e8-5b9aa8fb0309︡{"stderr":"Error in lines 2-2\nTraceback (most recent call last):\n  File \"/projects/66d9f5ce-4356-433a-9d13-31043d9bbbc9/.sagemathcloud/sage_server.py\", line 733, in execute\n    exec compile(block+'\\n', '', 'single') in namespace, locals\n  File \"\", line 1, in <module>\n  File \"matrix2.pyx\", line 9110, in sage.matrix.matrix2.Matrix.jordan_form (sage/matrix/matrix2.c:45693)\nRuntimeError: Some eigenvalue does not exist in Rational Field.\n"}︡
︠ab2c5f0c-3389-4346-99b9-c1cee471f2b2︠
A.minimal_polynomial()
︡83d6bc55-4877-4c5b-8303-acf17f1961a4︡{"stdout":"x^2 - 5/4\n"}︡
︠75ea76cb-ba1b-47e1-983a-87f37ddb8570︠
R = QQ[sqrt(5)]
A = A.change_ring(R)
show(A.jordan_form(transformation=True, subdivide=False))
︡2f9efc71-627f-42a6-bbac-3f9588d78955︡{"tex":{"tex":"\\left(\\left(\\begin{array}{rr}\n\\frac{1}{2} \\mathit{sqrt}_{5} & 0 \\\\\n0 & -\\frac{1}{2} \\mathit{sqrt}_{5}\n\\end{array}\\right), \\left(\\begin{array}{rr}\n1 & 1 \\\\\n-\\mathit{sqrt}_{5} + 2 & \\mathit{sqrt}_{5} + 2\n\\end{array}\\right)\\right)","display":true}}︡
︠4d24cf25-f138-40ed-9bb5-64d2e91a7cf5i︠
%md
# Algebarske strukture
︡5e97711d-7063-407e-aa12-abad35bbed7b︡{"html":"<h1>Algebarske strukture</h1>\n"}︡
︠d55f5c75-bea8-4444-ac08-2cd509951c08i︠
%md
### Permutacije, grupe

︡cb7ed4ae-1c43-49c2-9be1-ae68509bfd8c︡{"html":"<h3>Permutacije, grupe</h3>\n"}︡
︠677565b5-e21e-4cf3-a15a-6a0f764d82b9︠
S5 = SymmetricGroup(5)
S5.cardinality()
S5.list() #ciklička notacija!
︡b250a313-f6f1-4dbc-bc34-56019de1b924︡{"stdout":"120"}︡{"stdout":"\n"}︡{"stdout":"[(), (4,5), (3,4), (3,4,5), (3,5,4), (3,5), (2,3), (2,3)(4,5), (2,3,4), (2,3,4,5), (2,3,5,4), (2,3,5), (2,4,3), (2,4,5,3), (2,4), (2,4,5), (2,4)(3,5), (2,4,3,5), (2,5,4,3), (2,5,3), (2,5,4), (2,5), (2,5,3,4), (2,5)(3,4), (1,2), (1,2)(4,5), (1,2)(3,4), (1,2)(3,4,5), (1,2)(3,5,4), (1,2)(3,5), (1,2,3), (1,2,3)(4,5), (1,2,3,4), (1,2,3,4,5), (1,2,3,5,4), (1,2,3,5), (1,2,4,3), (1,2,4,5,3), (1,2,4), (1,2,4,5), (1,2,4)(3,5), (1,2,4,3,5), (1,2,5,4,3), (1,2,5,3), (1,2,5,4), (1,2,5), (1,2,5,3,4), (1,2,5)(3,4), (1,3,2), (1,3,2)(4,5), (1,3,4,2), (1,3,4,5,2), (1,3,5,4,2), (1,3,5,2), (1,3), (1,3)(4,5), (1,3,4), (1,3,4,5), (1,3,5,4), (1,3,5), (1,3)(2,4), (1,3)(2,4,5), (1,3,2,4), (1,3,2,4,5), (1,3,5,2,4), (1,3,5)(2,4), (1,3)(2,5,4), (1,3)(2,5), (1,3,2,5,4), (1,3,2,5), (1,3,4)(2,5), (1,3,4,2,5), (1,4,3,2), (1,4,5,3,2), (1,4,2), (1,4,5,2), (1,4,2)(3,5), (1,4,3,5,2), (1,4,3), (1,4,5,3), (1,4), (1,4,5), (1,4)(3,5), (1,4,3,5), (1,4,2,3), (1,4,5,2,3), (1,4)(2,3), (1,4,5)(2,3), (1,4)(2,3,5), (1,4,2,3,5), (1,4,2,5,3), (1,4,3)(2,5), (1,4)(2,5,3), (1,4,3,2,5), (1,4)(2,5), (1,4,2,5), (1,5,4,3,2), (1,5,3,2), (1,5,4,2), (1,5,2), (1,5,3,4,2), (1,5,2)(3,4), (1,5,4,3), (1,5,3), (1,5,4), (1,5), (1,5,3,4), (1,5)(3,4), (1,5,4,2,3), (1,5,2,3), (1,5,4)(2,3), (1,5)(2,3), (1,5,2,3,4), (1,5)(2,3,4), (1,5,3)(2,4), (1,5,2,4,3), (1,5,3,2,4), (1,5)(2,4,3), (1,5,2,4), (1,5)(2,4)]"}︡{"stdout":"\n"}︡
︠e0c609f1-caa0-4005-9385-6047be1629cc︠
S5.identity()
︡72444f36-7aa3-4f7e-baff-94e39b0fa4a3︡{"stdout":"()\n"}︡
︠03e8fff7-0184-42c5-9e96-65c2a760d5e3︠
S5.random_element()
︡4f4d15a1-93d6-4f6d-8fc6-01b2d24331f3︡{"stdout":"(2,3,5)"}︡{"stdout":"\n"}︡
︠6fb13027-70f7-4b92-a87c-22510cc80c61︠
r = S5.random_element()
r
r.domain()
︡bcdd49ac-952b-4094-9b64-4e770491a23a︡{"stdout":"(1,4,3)(2,5)\n"}︡{"stdout":"[4, 5, 1, 3, 2]\n"}︡
︠ffb52584-a252-4c06-8203-071853ca371b︠
s = S5('(1,3)(2,4)')
s.domain()
︡15a41ab0-3736-4abe-942c-f5a478a69c3a︡{"stdout":"[3, 4, 1, 2, 5]\n"}︡
︠8f5fea7b-25c1-4f23-8ee0-359446cd4cb9︠
t = S5([1,5,4,3,2])
t.domain()
︡f549e936-61f0-43fc-aaa5-e04207c903e0︡{"stdout":"[1, 5, 4, 3, 2]\n"}︡
︠f6123784-3a51-4d7e-9edb-15e8c89108da︠
t*s
︡95140a94-015e-49fe-96ce-fc9db4e3e0be︡{"stdout":"(1,3,2,5,4)\n"}︡
︠13cd2926-2d6c-4077-883b-fd5c779bb31e︠
t.order()
︡713eb66d-cde5-4c17-b373-b6074ac91faa︡{"stdout":"2\n"}︡
︠485ea0a0-e912-473a-874f-bb53615cea5d︠
t*t
︡60e47fa3-f94d-45b0-ab03-75595156801a︡{"stdout":"()\n"}︡
︠7605a5b4-1086-446e-9f05-1324f7023885︠
t.sign()
︡78cd473c-5f74-4822-8146-22724f5b322c︡{"stdout":"1\n"}︡
︠93c41915-64d7-4405-a394-19fffd847167︠
S4 = SymmetricGroup(4)
S4.is_subgroup(S5)
︡81fb1392-fd60-41f1-a5e4-fb227102bcf7︡{"stdout":"True\n"}︡
︠ac083b09-04e9-4e3b-80d2-35e7ced38e53︠
S4.normal_subgroups()
︡824d9c97-7b86-43a0-8674-e39e99c768ce︡{"stdout":"[Subgroup of (Symmetric group of order 4! as a permutation group) generated by [()], Subgroup of (Symmetric group of order 4! as a permutation group) generated by [(1,3)(2,4), (1,4)(2,3)], Subgroup of (Symmetric group of order 4! as a permutation group) generated by [(2,4,3), (1,3)(2,4), (1,4)(2,3)], Subgroup of (Symmetric group of order 4! as a permutation group) generated by [(1,2), (1,2,3,4)]]"}︡{"stdout":"\n"}︡
︠984062ef-da3c-48ed-8125-9f0a263168ab︠
H = S5.subgroup([t,s])
H
︡44e9b31e-a916-4897-aaa6-14e09617e835︡{"stdout":"Subgroup of (Symmetric group of order 5! as a permutation group) generated by [(2,5)(3,4), (1,3)(2,4)]\n"}︡
︠d7b92284-19b4-4d33-ab14-05b9dcf3881c︠
H.list()
︡c18e7e29-b159-4954-839e-9a86249f2f75︡{"stdout":"[(), (2,5)(3,4), (1,2)(4,5), (1,2,4,3,5), (1,3)(2,4), (1,3,2,5,4), (1,4)(3,5), (1,4,5,2,3), (1,5,3,4,2), (1,5)(2,3)]\n"}︡
︠545440c9-78ee-4d8a-9e8f-fa094d5aefe1︠
H.is_abelian()
H.is_cyclic()
︡4bbb854d-c9f4-45f0-a83d-e78c53e9d84d︡{"stdout":"False\n"}︡{"stdout":"False\n"}︡
︠22320cb8-bdae-454d-8938-017492ee5ffa︠
S3 = SymmetricGroup(3)
S3.cayley_table()
︡46817103-f2fa-49cd-9771-5bec52eee969︡{"stdout":"*  a b c d e f\n +------------\na| a b c d e f\nb| b a d c f e\nc| c e a f b d\nd| d f b e a c\ne| e c f a d b\nf| f d e b c a\n"}︡{"stdout":"\n"}︡
︠8a4b7da8-1f69-49eb-8546-ac07a9e5cb05︠
S3.cayley_table(names='elements')
︡0005ea65-4c5a-42e7-9803-bdc96ce16918︡{"stdout":"      *       ()   (2,3)   (1,2) (1,2,3) (1,3,2)   (1,3)\n       +------------------------------------------------\n     ()|      ()   (2,3)   (1,2) (1,2,3) (1,3,2)   (1,3)\n  (2,3)|   (2,3)      () (1,2,3)   (1,2)   (1,3) (1,3,2)\n  (1,2)|   (1,2) (1,3,2)      ()   (1,3)   (2,3) (1,2,3)\n(1,2,3)| (1,2,3)   (1,3)   (2,3) (1,3,2)      ()   (1,2)\n(1,3,2)| (1,3,2)   (1,2)   (1,3)      () (1,2,3)   (2,3)\n  (1,3)|   (1,3) (1,2,3) (1,3,2)   (2,3)   (1,2)      ()\n\n"}︡
︠91cde837-cacc-41e6-a928-b61369494fec︠
S3.cayley_table(names=['id','u1','u3','r1','r2','u2'])
︡274b2ac3-ed54-44b9-9fc3-d8ac5e94c020︡{"stdout":" *  id u1 u3 r1 r2 u2\n  +------------------\nid| id u1 u3 r1 r2 u2\nu1| u1 id r1 u3 u2 r2\nu3| u3 r2 id u2 u1 r1\nr1| r1 u2 u1 r2 id u3\nr2| r2 u3 u2 id r1 u1\nu2| u2 r1 r2 u1 u3 id\n\n"}︡
︠49a6ad80-f39b-4f15-9017-6b100dc9364d︠
r = '(1,3)(2,4)(5)'
s = '(1,3,2)'
K = PermutationGroup([r,s])
K
︡71c17f6b-5511-4b34-9b87-293860fc6a83︡{"stdout":"Permutation Group with generators [(1,3,2), (1,3)(2,4)]\n"}︡
︠b956137d-1146-4868-9ccb-3196405df371︠
K.order()
︡4b04984b-1d18-43c9-9cc1-bd112ddc7940︡{"stdout":"12\n"}︡
︠47b6ee87-5f98-4060-894d-9d0e7b317e3f︠
D = DihedralGroup(4)
D.list() #prikazana kao podgrupa permutacija
︡585f4528-c528-4213-9761-308ed62174a8︡{"stdout":"[(), (2,4), (1,2)(3,4), (1,2,3,4), (1,3), (1,3)(2,4), (1,4,3,2), (1,4)(2,3)]\n"}︡
︠51180d6a-ab76-4e05-abc0-08beb25a891e︠
D.subgroups()
︡6a9c1e06-541f-4f86-9d82-d8584676c98c︡{"stdout":"[Subgroup of (Dihedral group of order 8 as a permutation group) generated by [()], Subgroup of (Dihedral group of order 8 as a permutation group) generated by [(1,3)(2,4)], Subgroup of (Dihedral group of order 8 as a permutation group) generated by [(2,4)], Subgroup of (Dihedral group of order 8 as a permutation group) generated by [(1,3)], Subgroup of (Dihedral group of order 8 as a permutation group) generated by [(1,2)(3,4)], Subgroup of (Dihedral group of order 8 as a permutation group) generated by [(1,4)(2,3)], Subgroup of (Dihedral group of order 8 as a permutation group) generated by [(2,4), (1,3)(2,4)], Subgroup of (Dihedral group of order 8 as a permutation group) generated by [(1,2,3,4), (1,3)(2,4)], Subgroup of (Dihedral group of order 8 as a permutation group) generated by [(1,2)(3,4), (1,3)(2,4)], Subgroup of (Dihedral group of order 8 as a permutation group) generated by [(2,4), (1,2,3,4), (1,3)(2,4)]]"}︡{"stdout":"\n"}︡
︠0c54ce51-1ff9-471a-93d3-e4334ce0c053︠
D.center()
︡eaa29483-b3f0-4b75-95eb-4ff8a55c560d︡{"stdout":"Subgroup of (Dihedral group of order 8 as a permutation group) generated by [(1,3)(2,4)]\n"}︡
︠fa1d0145-dffe-450a-834e-c2bcd863d8f4︠
D.center().list()
︡a7671204-2db2-4e76-ac8d-6a33c377d865︡{"stdout":"[(), (1,3)(2,4)]\n"}︡
︠e611404b-a4b5-48e8-bef7-c9e1b2b1a2cb︠
D.centralizer(D('(1,3)(2,4)'))
︡c3a107aa-9bf6-4bb2-abcb-ceab9dbd7485︡{"stdout":"Subgroup of (Dihedral group of order 8 as a permutation group) generated by [(1,2,3,4), (1,4)(2,3)]\n"}︡
︠5c304d04-3ab9-4dc0-869a-3aab6bd4ce32︠
A4 = AlternatingGroup(4)
A4.cardinality()
︡0db69996-935f-4b54-b6a7-a7ec27201e58︡{"stdout":"12\n"}︡
︠58f9938c-7fbe-435c-8404-36cc43f8c156︠
g1 = A4('(1,4)(3,2)') ; g2 = A4('(2,4)(1,3)')
H = A4.subgroup([g1,g2]);
H.is_normal(A4);
︡da9122db-6ac3-49cd-9d74-1a5d3fd5e3d1︡{"stdout":"True\n"}︡
︠06e92b15-26e8-45f3-a049-3438516abda9︠
Hd = A4.cosets(H, side = 'right')
Hl = A4.cosets(H, side = 'left')
print "Hd = ", Hd
print "Hl = ", Hl
︡ce6aac1f-9f74-4399-bb10-63f6eb522aaa︡{"stdout":"Hd =  [[(), (1,2)(3,4), (1,3)(2,4), (1,4)(2,3)], [(2,3,4), (1,3,2), (1,4,3), (1,2,4)], [(2,4,3), (1,4,2), (1,2,3), (1,3,4)]]\n"}︡{"stdout":"Hl =  [[(), (1,2)(3,4), (1,3)(2,4), (1,4)(2,3)], [(2,3,4), (1,2,4), (1,3,2), (1,4,3)], [(2,4,3), (1,2,3), (1,3,4), (1,4,2)]]\n"}︡
︠7fee14dc-1942-4597-b82b-13f5edfdd384︠
A4.conjugacy_classes_representatives()
︡17301f1d-befc-4356-911f-9b7916d95c89︡{"stdout":"[(), (1,2)(3,4), (1,2,3), (1,2,4)]\n"}︡
︠652bb9e5-3e6a-47c6-90e9-fca4f4d93f70︠
B = DiCyclicGroup(3)
A.is_isomorphic(B)
︡e4a36f23-39ee-4015-8d30-dccc5e233214︡{"stdout":"False\n"}︡
︠8fb68d31-e5ea-4539-a79e-34e689e4d283︠
T = [s for s in S5  if s.order() == 2]
T
︡51687cc2-0a22-4bf2-bffd-f0a17a264338︡{"stdout":"[(4,5), (3,4), (3,5), (2,3), (2,3)(4,5), (2,4), (2,4)(3,5), (2,5), (2,5)(3,4), (1,2), (1,2)(4,5), (1,2)(3,4), (1,2)(3,5), (1,3), (1,3)(4,5), (1,3)(2,4), (1,3)(2,5), (1,4), (1,4)(3,5), (1,4)(2,3), (1,4)(2,5), (1,5), (1,5)(3,4), (1,5)(2,3), (1,5)(2,4)]\n"}︡
︠a9ae875c-f2fc-4daf-baed-0c6ce7a247b7i︠
%md
### Prsteni polinoma
︡a56229d9-07bb-4c70-818e-30294c0a4609︡{"html":"<h3>Prsteni polinoma</h3>\n"}︡
︠8bdff69f-1a44-4d77-b649-60e18de5dc3b︠
R.<x>=PolynomialRing(ZZ) #x je varijabla polinoma iz polja Z
R
︡221c1877-1e1e-4403-b919-c2e85ed45fab︡{"stdout":"Univariate Polynomial Ring in x over Integer Ring\n"}︡
︠af1af755-1a86-436f-9be8-a20bd7e9a1eb︠
p = 2*x^2 + (1/2)*x + (3/5)
parent(p)
︡fb4d4554-0f03-4633-b996-53b79781470c︡{"stdout":"Univariate Polynomial Ring in x over Rational Field\n"}︡
︠08497980-7d12-4c7f-a5a7-d6516e28ad52︠
S.<y>=PolynomialRing(ZZ)
(1/2)*y in S
︡29996c3a-cf65-4975-ad6c-69cded4ebb2c︡{"stdout":"False\n"}︡
︠5566d171-d0e7-474b-b92f-26e3c1a5725f︠
f=x+1
g=x^2+x-1
h=1/2*x+3/4
parent(f), parent(g), parent(h)
f+g
g-h
f*g
h^3
︡fed9287c-ce6f-4cf8-ad68-baf3b8e2546b︡{"stdout":"(Univariate Polynomial Ring in x over Integer Ring, Univariate Polynomial Ring in x over Integer Ring, Univariate Polynomial Ring in x over Rational Field)\n"}︡{"stdout":"x^2 + 2*x\n"}︡{"stdout":"x^2 + 1/2*x - 7/4\n"}︡{"stdout":"x^3 + 2*x^2 - 1\n"}︡{"stdout":"1/8*x^3 + 9/16*x^2 + 27/32*x + 27/64\n"}︡
︠c65df025-e052-40c6-a0fb-bf6deb19480d︠
f/g
parent(f/g)
︡b64cb6fd-a315-4914-9c75-72e277c47535︡{"stdout":"(x + 1)/(x^2 + x - 1)\n"}︡{"stdout":"Fraction Field of Univariate Polynomial Ring in x over Integer Ring\n"}︡
︠ab09d9b4-afbf-4994-a75b-9f4eff9e2f8b︠
f=x^6+x^2+1
g=x^3+x+1
f // g
f % g
︡255fed41-6628-429d-8043-7f5e534124f5︡{"stdout":"x^3 - x - 1\n"}︡{"stdout":"2*x^2 + 2*x + 2\n"}︡
︠14f77ac1-7a28-469d-93eb-e9dd92839cc2︠
p = x^4 + 2*x^3 + 2*x^2 + 2*x + 1
q = x^4 - 1
gcd(p,q)
︡2580e941-05d2-4206-906b-ba07da8b3780︡{"stdout":"x^3 + x^2 + x + 1\n"}︡
︠31d8fae0-2304-4e63-9cd7-6faa4fb28756︠
(x^3+x+1).is_irreducible()
︡ad7b068c-4077-4962-87b2-0f40213eb46c︡{"stdout":"True\n"}︡
︠b3221bb4-8c46-4ac2-9753-e249ee9dbc9c︠
(x^3+1).is_irreducible()
︡0f1e9bae-2e9c-47c1-a91f-55d92d4a2996︡{"stdout":"False\n"}︡
︠5f7a3006-f4b0-48d3-a41b-5ce8df674644︠
R.<x,y,z> = PolynomialRing(QQ, 3)
p = -1/2*x - y*z - y + 8*z^2
p.monomials()
p.coefficients()
[ a*b for a,b in zip(p.coefficients(),p.monomials())]
︡7a3c5da1-7ba5-4362-a154-2bc17d9869dc︡{"stdout":"[y*z, z^2, x, y]\n"}︡{"stdout":"[-1, 8, -1/2, -1]\n"}︡{"stdout":"[-y*z, 8*z^2, -1/2*x, -y]\n"}︡
︠b604521b-cce7-4a21-ae6f-e9e7abe4b47b︠
p.lc() #vodeći koeficijent
p.lt() #vodeći član
︡a60f84ac-4362-437d-90e2-8f890bb7a4c7︡{"stdout":"-1\n"}︡{"stdout":"-y*z\n"}︡
︠238055f2-1c2a-479b-af53-2db4273417bf︠
p.total_degree()
p.exponents()
︡e2bf09b6-feb3-4d9b-881f-fb1cc027ec22︡{"stdout":"2\n"}︡{"stdout":"[(0, 1, 1), (0, 0, 2), (1, 0, 0), (0, 1, 0)]\n"}︡
︠0bd4b4b8-c6b6-438b-9e1d-6b3932d2fb20i︠
%md
### Elementarna teorija brojeva
︡999126ec-757f-4108-8935-7521ec70595e︡{"html":"<h3>Elementarna teorija brojeva</h3>\n"}︡
︠4338684f-ea53-4252-894d-f9325dc1a7ae︠
gcd(2776, 2452)
︡97d51225-d06c-4158-8f4a-d03a47f17c76︡{"stdout":"4\n"}︡
︠e1ad7cf9-aec6-44d0-9f8d-871a304a762e︠
a = 633
b = 331
ext = xgcd(a, b)
ext[0] == ext[1]*a + ext[2]*b
︡63b3b877-cecb-47ad-b6b7-c132f980e116︡{"stdout":"True\n"}︡
︠1587a09f-19aa-4179-9fd5-c094a105df0e︠
factor(2600)
prime_divisors(2600)
︡db4b2b9f-368c-481d-9687-205cc076fa86︡{"stdout":"2^3 * 5^2 * 13\n"}︡{"stdout":"[2, 5, 13]\n"}︡
︠b726d5c1-0fb0-4b6e-8a46-781d8ad499f0︠
inverse_mod(352, 917)
︡9f660264-29b6-4af2-841f-2a22a4bba128︡{"stdout":"508\n"}︡
︠816a2b89-6447-4b38-8e9e-0a43c8465516i︠
%md
multiplikativni inverz od 352 mod 917; znači postoji `m` takav da vrijedi `352*508 == m*917+1`
︡6153a0e0-b69f-4e04-a6c4-5900d1db9112︡{"html":"<p>multiplikativni inverz od 352 mod 917; znači postoji <code>m</code> takav da vrijedi <code>352*508 == m*917+1</code></p>\n"}︡
︠fe75e2a3-6745-4bb6-96dd-84fa549846a4︠
euler_phi(345)
︡5b983d2b-5e28-4a6d-b92c-fd6546adb9fc︡{"stdout":"176\n"}︡
︠96aa5a2e-34c4-4294-bc71-531467e27d1c︠
m = random_prime(10000)
n = random_prime(10000)
euler_phi(m*n) == euler_phi(m) * euler_phi(n)
︡62f21bf9-a316-4f32-924d-08210ac1bedc︡{"stdout":"True\n"}︡
︠173af210-9cdc-4e3d-94a9-81f870b2b666︠
is_prime(14547073)
︡c44f8d5d-e53d-4f21-8fa0-3de836fffe72︡{"stdout":"False\n"}︡
︠4ecebba5-574b-4cf7-8828-8648851fd33f︠
p = random_prime(10^21, True) #bez `True` računanje će biti puno brže, uz malu šansu da broj nije prost
is_prime(p)
︡5a3f56cb-6cfb-485f-aab0-94a1f2b7cfc8︡{"stdout":"True\n"}︡
︠a8e9d0fc-558b-4713-b809-742d9221adc0︠
prime_range(500, 550)
primes_first_n(20)
︡0ebc0372-53f0-4c3f-a0cf-46465f947cef︡{"stdout":"[503, 509, 521, 523, 541, 547]\n"}︡{"stdout":"[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n"}︡
︠c0255080-8040-4921-8896-949733ca2332i︠
%html
Kongruencije: $a\equiv b \pmod{n}$.
Broj $b$ možemo izračunati pomoću sljedećeg koda: <code>mod(a,n)</code>
︡dc72d98d-b891-45cc-a4cd-90609a25f442︡{"html":"Kongruencije: $a\\equiv b \\pmod{n}$.\nBroj $b$ možemo izračunati pomoću sljedećeg koda: <code>mod(a,n)</code>"}︡
︠7ce147e4-ba8a-4023-be59-03072772b9af︠
mod(23, 5)
︡629add6e-5749-4e02-8057-ce690642d62c︡{"stdout":"3\n"}︡
︠ee13cf93-cef0-41dd-abb5-4a5280185f51i︠
%html
$a^m \mod n$
︡bd9cbbe9-3886-4620-907a-8c5b9f7f58ed︡{"html":"$a^m \\mod n$"}︡
︠f3e7f819-3343-4517-bc73-35c28c71e929︠
power_mod(15, 831, 23)
︡2897e7f8-ddc0-4b1d-9ebe-da19c47ca58f︡{"stdout":"10\n"}︡
︠6576ac93-0c16-47ac-a41a-84af24ffc092i︠
%md
# Kombinatorika
︡608c3b0e-6c69-47cb-9976-c5c8595d9c23︡{"html":"<h1>Kombinatorika</h1>\n"}︡
︠f0fd878d-04fe-4ff7-8d08-f7a61a39a371︠
boje = Set(["pik", "herc", "karo", "tref"])
vrijednosti = Set([2, 3, 4, 5, 6, 7, 8, 9, 10,"luda", "kraljica", "kralj", "as"])
karte = CartesianProduct(vrijednosti, boje).map(tuple)
karte.random_element()
︡62f30497-a062-4478-ac0b-e31cc5c177c4︡{"stdout":"(5, 'karo')\n"}︡
︠35f5d89b-8abf-41eb-84dd-c9b137d1a095︠
ruke = Subsets(karte, 5)
ruke.random_element()
︡8d9a40a1-b78d-43c8-b4d5-8032386ac3df︡{"stdout":"{(4, 'karo'), (8, 'herc'), (8, 'karo'), (5, 'pik'), (3, 'karo')}\n"}︡
︠8ad1e218-8ae3-45e5-b78b-64d0b23c8b03︠
ruke.cardinality()
︡b87433d7-5042-486e-8cdd-dcde1569c17a︡{"stdout":"2598960\n"}︡
︠1ac1c505-94ab-48a2-8342-d8abe311888a︠
S = Subsets([1,2,3,4], 2)
S.random_element()
S.cardinality()
︡7e19b526-5568-4d23-b81f-41e6b59253af︡{"stdout":"{1, 3}\n"}︡{"stdout":"6\n"}︡
︠666bb64f-0b66-43b5-a1a4-b6b70e75866e︠
E = Set([1,2,3,4])
S = Subsets(Subsets(Subsets(E)))
S.cardinality()
︡e39c3b2a-88ca-476c-a4ac-466f5b964a75︡{"stdout":""}︡{"stdout":"\n"}︡
︠feb1dd18-07bc-4589-b853-0c0d33e45f4c︠
C = SetPartitions([1,2,3])
C.list()
︡41e5ec80-4dbd-4a6f-97cb-ee761c78792c︡{"stdout":"[{{1, 2, 3}}, {{1}, {2, 3}}, {{1, 3}, {2}}, {{1, 2}, {3}}, {{1}, {2}, {3}}]\n"}︡
︠111b00c1-9346-42fe-91c0-921fa9d332a2︠
[[binomial(n,i) for i in range(n+1)] for n in range(10)]
︡175fb55b-6a86-4e39-ae81-8c2c6003d8a6︡{"stdout":"[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1], [1, 6, 15, 20, 15, 6, 1], [1, 7, 21, 35, 35, 21, 7, 1], [1, 8, 28, 56, 70, 56, 28, 8, 1], [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]]\n"}︡
︠4d1a5548-0779-4214-8f30-6ee2cd7db789︠
C = Permutations(4)
C
︡ef9b1eb8-45ab-4ac8-a49a-ba0d48a89733︡{"stdout":"Standard permutations of 4\n"}︡
︠f61962fe-8b79-4070-9e0b-a2e5f5404910︠
C.list()
︡7a4a6d7a-4851-423c-b2ff-1b5ba86a3350︡{"stdout":"[[1, 2, 3, 4], [1, 2, 4, 3], [1, 3, 2, 4], [1, 3, 4, 2], [1, 4, 2, 3], [1, 4, 3, 2], [2, 1, 3, 4], [2, 1, 4, 3], [2, 3, 1, 4], [2, 3, 4, 1], [2, 4, 1, 3], [2, 4, 3, 1], [3, 1, 2, 4], [3, 1, 4, 2], [3, 2, 1, 4], [3, 2, 4, 1], [3, 4, 1, 2], [3, 4, 2, 1], [4, 1, 2, 3], [4, 1, 3, 2], [4, 2, 1, 3], [4, 2, 3, 1], [4, 3, 1, 2], [4, 3, 2, 1]]\n"}︡
︠4b08901f-4fef-44bd-8855-7006367ea123︠
C = Compositions(5)
C.list()
list(Compositions(5, max_length=2))
︡6fa2db79-0591-46a8-8ba9-f582fbc6607c︡{"stdout":"[[1, 1, 1, 1, 1], [1, 1, 1, 2], [1, 1, 2, 1], [1, 1, 3], [1, 2, 1, 1], [1, 2, 2], [1, 3, 1], [1, 4], [2, 1, 1, 1], [2, 1, 2], [2, 2, 1], [2, 3], [3, 1, 1], [3, 2], [4, 1], [5]]\n"}︡{"stdout":"[[5], [4, 1], [3, 2], [2, 3], [1, 4]]\n"}︡
︠ac7124f2-7720-4d7d-a09c-e384210dd088︠
C = Combinations(range(4))
C.list()
︡44c2be3a-0f9d-445f-a999-36f5d557945e︡{"stdout":"[[], [0], [1], [2], [3], [0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [2, 3], [0, 1, 2], [0, 1, 3], [0, 2, 3], [1, 2, 3], [0, 1, 2, 3]]\n"}︡
︠5e67fb88-59e5-47ea-9733-4b2a82047d38︠
Combinations([1,2,2,3]).list()
︡70c43abc-a936-4edb-b5a5-449867f8db50︡{"stdout":"[[], [1], [2], [3], [1, 2], [1, 3], [2, 2], [2, 3], [1, 2, 2], [1, 2, 3], [2, 2, 3], [1, 2, 2, 3]]\n"}︡
︠1836efe7-6e62-416f-ac09-9cfa99d34f03︠
C = CartesianProduct(Compositions(8), Permutations(20))
C
︡e1ce8e4b-0f81-4f49-a14b-e5ff0c8307e6︡{"stdout":"Cartesian product of Compositions of 8, Standard permutations of 20\n"}︡
︠13ff68d8-9922-4796-9417-f129bd2fc294︠
C.cardinality()
︡f627f748-e504-4c5f-aca2-b07acfad6bd0︡{"stdout":"311411457046609920000\n"}︡
︠dedd0f42-cc2b-450b-a39b-8ddb120f14b1︠
D = Derangements(4)
D.list()
︡3057a472-bfce-4eed-b7e3-8e6126cab973︡{"stdout":"[[2, 3, 4, 1], [4, 3, 1, 2], [2, 4, 1, 3], [3, 4, 2, 1], [3, 1, 4, 2], [4, 1, 2, 3], [4, 3, 2, 1], [3, 4, 1, 2], [2, 1, 4, 3]]\n"}︡
︠62cbf391-27c4-4d0e-b691-113e292926bai︠
%md
# Teorija grafova
︡9d6735b0-a125-4500-815c-efa74c932681︡{"html":"<h1>Teorija grafova</h1>\n"}︡
︠97624591-bb5b-4d06-9a26-eb64e3b4c34bi︠
%md
Nađite najveći podskup prirodnih brojeva manjih od 100 takvih da za svaki par $(a,b)$ vrijedi da $a-b$ nije kvadrat prirodnog broja?
︡4f6a2935-f2c9-4b71-aa4b-92273adaec4a︡{"html":"<p>Nađite najveći podskup prirodnih brojeva manjih od 100 takvih da za svaki par $(a,b)$ vrijedi da $a-b$ nije kvadrat prirodnog broja?</p>\n"}︡
︠bdd7cb56-9912-495c-a8fd-fbed40ac92e3︠
n = 100
g=Graph(n)
kvadrati = [i*i for i in range(sqrt(n))]
bridovi = [(i,j) for (i,j) in CartesianProduct(range(n),range(n)) if (i!=j and abs(i-j) in kvadrati)]
g.add_edges(bridovi)
g.independent_set()
︡8b2fd510-f75a-45c6-8ac6-8a89c6d45e22︡{"stdout":"[3, 5, 8, 10, 15, 20, 22, 25, 27, 32, 37, 42, 49, 55, 60, 70, 75, 77, 82, 87, 92, 94, 97, 99]"}︡{"stdout":"\n"}︡
︠8b74b213-9149-4ce6-8261-7d9215bac55c︠
g = graphs.CompleteGraph(5)
_=latex.eval(latex(g)) #https://github.com/sagemath/cloud/wiki/FAQ#tikz
︡f2e2d4d8-ef6e-4001-8ad9-c4942d1399c0︡{"once":false,"file":{"show":true,"uuid":"fc7d5c7e-753d-478c-b7db-4289229f24fb","filename":"/tmp/tmpBqLnfM.png"}}︡
︠5e09d5e8-2a8f-4394-8779-ec58ef4dfd40︠
G = Graph()
G.add_vertices(range(10))
G.add_cycle(range(10))
_=latex.eval(latex(G))
︡cbb4964d-af19-4f6e-9b2b-c278aaea29e3︡{"once":false,"file":{"show":true,"uuid":"5ddb05d6-b262-460b-8aa8-269cf648baf3","filename":"/tmp/tmphCrvaa.png"}}︡
︠574183a3-f24c-459b-8ab9-5f9e93cda31b︠
D = DiGraph()
D.add_cycle(range(4))
_=latex.eval(latex(D))
︡4408b8eb-d3f9-4515-8e15-e52493342770︡{"once":false,"file":{"show":true,"uuid":"7e2074f8-a296-4b1c-855b-ae043c54bb49","filename":"/tmp/tmpVETv8F.png"}}︡
︠5044e4ea-a985-4f45-ad55-1b83534c7ec1︠
d = {0: [1,4,5], 1: [2,6], 2: [3,7], 3: [4,8], 4: [9], 5: [7,8], 6: [8,9], 7: [9]}
G = Graph(d)
_=latex.eval(latex(G))
︡228249a9-86d6-445a-b01b-31a8d07df51c︡{"once":false,"file":{"show":true,"uuid":"6c5885f4-7d9a-431a-9706-514b03efd4ba","filename":"/tmp/tmpN9dQqh.png"}}︡
︠4d978555-5bc2-4661-a50e-f2352edffccf︠
G.add_vertices([10,11,12])
G.vertices()
︡e4e78f9a-d556-449d-9ae2-e7c76b4ffe20︡{"stdout":"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n"}︡
︠4c9096f0-b324-42fa-9b14-244d040c05a1︠
G.adjacency_matrix()
︡3d945917-feb0-4180-a3dd-84f633c92781︡{"stdout":"[0 1 0 0 1 1 0 0 0 0 0 0 0]\n[1 0 1 0 0 0 1 0 0 0 0 0 0]\n[0 1 0 1 0 0 0 1 0 0 0 0 0]\n[0 0 1 0 1 0 0 0 1 0 0 0 0]\n[1 0 0 1 0 0 0 0 0 1 0 0 0]\n[1 0 0 0 0 0 0 1 1 0 0 0 0]\n[0 1 0 0 0 0 0 0 1 1 0 0 0]\n[0 0 1 0 0 1 0 0 0 1 0 0 0]\n[0 0 0 1 0 1 1 0 0 0 0 0 0]\n[0 0 0 0 1 0 1 1 0 0 0 0 0]\n[0 0 0 0 0 0 0 0 0 0 0 0 0]\n[0 0 0 0 0 0 0 0 0 0 0 0 0]\n[0 0 0 0 0 0 0 0 0 0 0 0 0]\n"}︡
︠0ff5cfe3-eb06-4296-90fb-90e4ebe0fc80︠
g = graphs.CompleteGraph(5)
g.average_degree()
︡6cf7f99d-6729-416b-b816-8127be30f450︡{"stdout":"4\n"}︡
︠96b19bd7-f2de-4096-b607-cf3abe46d6a5i︠
%md
`RandomGNP(n,p)` vraća slučajan graf s n vrhova, s time da je svaki brid ubačen s vjerojatnošću p.
︡a253eed1-3ec5-4942-a78c-33523e1fa749︡{"html":"<p><code>RandomGNP(n,p)</code> vraća slučajan graf s n vrhova, s time da je svaki brid ubačen s vjerojatnošću p.</p>\n"}︡
︠5281b2c8-ffa4-4c9d-8eea-fc73f87e8c8a︠
g = graphs.RandomGNP(20,0.5)
g.min_spanning_tree() #default je Kriskalov algoritam
︡14133db8-931c-4161-bf56-9441986e70b1︡{"stdout":"[(0, 1, None), (0, 2, None), (0, 3, None), (0, 4, None), (0, 6, None), (0, 7, None), (0, 8, None), (0, 9, None), (0, 13, None), (0, 14, None), (0, 15, None), (0, 16, None), (1, 5, None), (1, 11, None), (1, 17, None), (1, 18, None), (2, 12, None), (3, 19, None), (4, 10, None)]"}︡{"stdout":"\n"}︡
︠93d5c0c5-4011-42c6-86bd-1c6285443773︠
g = graphs.CompleteGraph(5)
tezina = lambda e: 1 / ((e[0] + 1) * (e[1] + 1))
g.min_spanning_tree(algorithm='Prim_fringe', starting_vertex=2, weight_function=tezina) #Primov algoritam
︡72c08ec2-b3d1-4399-9cef-87f467c4b398︡{"stdout":"[(2, 4), (4, 3), (4, 1), (4, 0)]\n"}︡
︠658cfca5-77b1-442e-b59c-790697eca31c︠
D = DiGraph({0 : [1, 3], 1 : [2], 2 : [3], 4 : [5, 6], 5 : [6]})
D.connected_components_number()
D.connected_components()
︡c8da31bd-2342-4ef4-90ae-d14e0c150afa︡{"stdout":"2\n"}︡{"stdout":"[[0, 1, 2, 3], [4, 5, 6]]\n"}︡
︠174a57a2-28ed-4d50-b158-41d4c61d8cc1︠
P = graphs.PetersenGraph()
P.degree(5)
P.degree()
︡5e3a87f6-dd37-4e27-88cd-c5f8cd325345︡{"stdout":"3\n"}︡{"stdout":"[3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n"}︡
︠b83104eb-c622-4f2e-be22-3db167fd7304︠
G = graphs.CompleteGraph(19)
G.size()
G.delete_edges( [ (5, 6), (7, 8) ] )
G.size()
︡b8da698f-3545-4850-b8f4-6b1726d2ee60︡{"stdout":"171\n"}︡{"stdout":"169\n"}︡
︠c757f859-b757-4d5e-9378-2a77dcd59236︠
G = graphs.CycleGraph(9)
_=latex.eval(latex(G))
︡43beaa76-8aa6-4bc1-bd34-7eb21c0973a8︡{"once":false,"file":{"show":true,"uuid":"984807b5-add3-409f-81a5-e280286cd664","filename":"/tmp/tmpV5jT9F.png"}}︡
︠6612055b-2da4-465f-914e-410674ced945︠
G.distance(0,5)
︡60025b21-4b67-4f7a-b6f1-e5ccd6d593e1︡{"stdout":"4\n"}︡
︠d4ace164-5412-44f4-8704-288f50924035︠
G = graphs.CompleteGraph(7)
G.is_eulerian()
G.eulerian_circuit(labels=False)
︡bb04c36d-f353-4bbd-90da-330149f991aa︡{"stdout":"True\n"}︡{"stdout":"[(0, 6), (6, 5), (5, 4), (4, 6), (6, 3), (3, 5), (5, 2), (2, 4), (4, 3), (3, 2), (2, 6), (6, 1), (1, 5), (5, 0), (0, 4), (4, 1), (1, 3), (3, 0), (0, 2), (2, 1), (1, 0)]\n"}︡
︠c095c2f3-e6d8-4a15-842d-108b9d53921c︠
g = G.random_subgraph(0.25)
_=latex.eval(latex(g))
︡8d52babc-4449-431f-94d0-947ae082579b︡{"once":false,"file":{"show":true,"uuid":"df84c1d4-1e3c-4efd-818b-05cebfed3b4e","filename":"/tmp/tmpgK8gCd.png"}}︡
︠9d345a74-05da-41b3-a0a5-8112bf7f2566︠
g = graphs.CubeGraph(4)
g.is_planar()
︡8a4a86ee-6cb6-4535-8755-e3bdb221fab1︡{"stdout":"False\n"}︡
︠6534ab92-67cf-42fc-b3b3-4d73e1171a8a︠
g = graphs.CubeGraph(3)
g.is_planar()
︡0e30d8ab-0689-41f1-8da7-cc2a672c4ee3︡{"stdout":"True\n"}︡
︠1df4b899-7fe6-4bbf-b462-b553ae094885︠
G = Graph( { 0 : [1, 2], 1 : [2], 3 : [4, 5], 4 : [5] } )
_=latex.eval(latex(G))
︡d9255109-3505-4274-b582-4ade125e2bf0︡{"once":false,"file":{"show":true,"uuid":"b6434cfc-36d5-4d65-9d54-60189c90f075","filename":"/tmp/tmpBUbJUk.png"}}︡
︠f6df0c04-b9b1-417d-918f-7e14b2dc164c︠
G.is_connected()
︡2389fa9d-2b30-49b8-8fec-ff95186c30a8︡{"stdout":"False\n"}︡
︠e2051f09-e9cf-4fc4-9aff-68e152c00e76︠
G.add_edge(0,3)
G.is_connected()
︡f05baddf-1ffe-4ffe-b540-45945b3705b6︡{"stdout":"True\n"}︡
︠2d56ed5a-17bd-4932-9a05-b154e6006027︠
D = graphs.DodecahedralGraph()
D.shortest_path(4, 9)
︡489ad228-6c9f-4ccc-933d-4d33e09a81ae︡{"stdout":"[4, 17, 16, 12, 13, 9]\n"}︡
︠eab8cef0-3457-4d6e-a20c-748f99d97508︠
n = 11
G = graphs.CompleteGraph(n)
ST = G.spanning_trees_count()
ST == n^(n-2)
︡cfe99e78-4261-4a91-a58e-bc6c7b40119c︡{"stdout":"True\n"}︡
︠7fb3cd28-8b60-4780-b11c-919902736d3fi︠
%md
# Kriptografija
### RSA

Neka su $p$, $q$ (veliki) prosti brojevi. Neka je $n=p\ast q$. Znamo $\varphi(n)=(p-1)(q-1)$.

Neka je $e$ tzv. enkripcijski eksponent, bilo koji broj koji je relativno prost s $\varphi(n)$. Kako su $e$ i $\varphi(n)$ relativno prosti, postoji multiplikativni inverz $d$: $ed \equiv 1\pmod{\varphi(n)}$. Broj $d$ zovemo dekripcijski eksponent. Parametar $(n,e)$ je javan, dok su faktorizacija $n=pq$ te broj $d$ tajni. Dekripcija se obavlja funkcijom $f(x)=x^e$ a enkripcija funkcijom $g(y)=y^d \mod n$ (pretpostavljamo $x\lt n$).

Par $(n,e)$ zovemo javni ključ a trojku $(p,q,d)$ privatni ključ.

︡cec7fe75-be22-4117-a56a-afb4b26ebffb︡{"html":"<h1>Kriptografija</h1>\n\n<h3>RSA</h3>\n\n<p>Neka su $p$, $q$ (veliki) prosti brojevi. Neka je $n=p\\ast q$. Znamo $\\varphi(n)=(p-1)(q-1)$.</p>\n\n<p>Neka je $e$ tzv. enkripcijski eksponent, bilo koji broj koji je relativno prost s $\\varphi(n)$. Kako su $e$ i $\\varphi(n)$ relativno prosti, postoji multiplikativni inverz $d$: $ed \\equiv 1\\pmod{\\varphi(n)}$. Broj $d$ zovemo dekripcijski eksponent. Parametar $(n,e)$ je javan, dok su faktorizacija $n=pq$ te broj $d$ tajni. Dekripcija se obavlja funkcijom $f(x)=x^e$ a enkripcija funkcijom $g(y)=y^d \\mod n$ (pretpostavljamo $x\\lt n$).</p>\n\n<p>Par $(n,e)$ zovemo javni ključ a trojku $(p,q,d)$ privatni ključ.</p>\n"}︡
︠c704e472-b95c-4a9d-985a-4d40458861d9︠
p = (2^31) - 1
is_prime(p)
︡14714346-490e-44ac-99d9-dcbec15de601︡{"stdout":"True\n"}︡
︠a4c6331e-797d-4390-b782-f24bf08d0553︠
q = (2^61) - 1
is_prime(q)
︡d0b59282-e3d8-4cf4-8cbb-6ecad0549687︡{"stdout":"True\n"}︡
︠df33aa63-6e04-4b83-b1eb-d7fd2355b483︠
n = p * q
n
︡1b0bae7d-9278-4999-b701-02eb07c0c6e3︡{"stdout":"4951760154835678088235319297\n"}︡
︠399f7393-2c13-4f68-b33b-88ad065580b8︠
phi = (p - 1)*(q - 1)
phi
︡9e89a6ce-7eaa-4c77-a15c-cd1b17d7943f︡{"stdout":"4951760152529835076874141700\n"}︡
︠66406ce2-d5a4-47cb-80fc-271b81fbf6ef︠
e = ZZ.random_element(phi)
while gcd(e, phi) != 1:
    e = ZZ.random_element(phi)
︡c2bc0020-d3fb-4a77-ad6f-81b0fb5dc4eb︡
︠2e81607a-b5e8-443a-bc89-f7fb564e1870︠
e
︡4447e4b5-649e-4b21-8836-d8506fec4ee6︡{"stdout":"4124334359281736885907994237\n"}︡
︠c0a47891-ceca-4c43-a867-59ce547df515︠
e < n
︡4b8039aa-1358-4bb2-a53d-04449f6dbe61︡{"stdout":"True\n"}︡
︠7625bcb6-697e-4879-8749-9d203c8eddf5i︠
%md
$ed \equiv 1\pmod{\varphi(n)}$ je ekvivalentno s $de-k\varphi(b)=1$, pa $d$ možemo odrediti Euklidovim algoritmom.
︡5502c3e9-4fb5-4bc2-aaee-461df33eea34︡{"html":"<p>$ed \\equiv 1\\pmod{\\varphi(n)}$ je ekvivalentno s $de-k\\varphi(b)=1$, pa $d$ možemo odrediti Euklidovim algoritmom.</p>\n"}︡
︠442e6162-bfd1-45f3-9358-7d26968e6514︠
b = xgcd(e, phi)
d = Integer(mod(b[1], phi))
d
︡c4beaf88-82a8-4ccc-a526-61373868fe47︡{"stdout":"4335296058468185697429612373\n"}︡
︠1cfb8a4a-9286-4643-899a-3fbb457ec91c︠
mod(d * e, phi)
︡9f8664b3-adfe-4e14-94d9-0e12ecf69034︡{"stdout":"1\n"}︡
︠bc1963a2-a2d1-4488-b55c-e5326d809116︠
(n,e) #javni ključ
︡2028ce6c-6514-4f0d-8713-8dbad5b43355︡{"stdout":"(4951760154835678088235319297, 4124334359281736885907994237)\n"}︡
︠5160d480-a854-4bfc-bb05-f755c98c6663︠
(p,q,d) #privatni ključ
︡77d99c9b-8889-4880-8d79-9b8037fbf015︡{"stdout":"(2147483647, 2305843009213693951, 4335296058468185697429612373)\n"}︡
︠68ad1d80-cac0-4a4e-8c7d-ab093f40c5ab︠
x = "ZDRAVO!" #želimo šifrirati
m = map(ord, x)
m
︡2bf7ad2f-b05b-480f-9b17-0aa002284b75︡{"stdout":"[90, 68, 82, 65, 86, 79, 33]\n"}︡
︠2b608e84-d588-4d34-9062-4dde35b4f70d︠
m = ZZ(list(reversed(m)), 100)
m
︡0dd07496-7a39-4aa7-812d-a27095338e30︡{"stdout":"90688265867933\n"}︡
︠93f9e027-91c7-4155-9380-b5adeedc9625︠
c = power_mod(m, e, n)
c #šifrirani tekst
︡fa5ed233-7018-4aee-9753-0d45e1efdeab︡{"stdout":"358182658345234025641464040\n"}︡
︠8e867949-44fc-45f3-aafe-28b67dd335cb︠
power_mod(c, d, n) == m

︡763fe05d-8795-4de6-995c-f6588d52c16a︡{"stdout":"True\n"}︡
︠bd749b52-1f08-434f-b27b-bf6aaec080ff︠









